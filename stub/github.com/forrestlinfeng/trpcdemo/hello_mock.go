// Code generated by MockGen. DO NOT EDIT.
// Source: stub/github.com/forrestlinfeng/trpcdemo/hello.trpc.go

// Package trpcdemo is a generated GoMock package.
package trpcdemo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockHelloService is a mock of HelloService interface.
type MockHelloService struct {
	ctrl     *gomock.Controller
	recorder *MockHelloServiceMockRecorder
}

// MockHelloServiceMockRecorder is the mock recorder for MockHelloService.
type MockHelloServiceMockRecorder struct {
	mock *MockHelloService
}

// NewMockHelloService creates a new mock instance.
func NewMockHelloService(ctrl *gomock.Controller) *MockHelloService {
	mock := &MockHelloService{ctrl: ctrl}
	mock.recorder = &MockHelloServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelloService) EXPECT() *MockHelloServiceMockRecorder {
	return m.recorder
}

// Hello mocks base method.
func (m *MockHelloService) Hello(ctx context.Context, req *HelloRequest) (*HelloResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hello", ctx, req)
	ret0, _ := ret[0].(*HelloResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hello indicates an expected call of Hello.
func (mr *MockHelloServiceMockRecorder) Hello(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hello", reflect.TypeOf((*MockHelloService)(nil).Hello), ctx, req)
}

// MockHelloClientProxy is a mock of HelloClientProxy interface.
type MockHelloClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockHelloClientProxyMockRecorder
}

// MockHelloClientProxyMockRecorder is the mock recorder for MockHelloClientProxy.
type MockHelloClientProxyMockRecorder struct {
	mock *MockHelloClientProxy
}

// NewMockHelloClientProxy creates a new mock instance.
func NewMockHelloClientProxy(ctrl *gomock.Controller) *MockHelloClientProxy {
	mock := &MockHelloClientProxy{ctrl: ctrl}
	mock.recorder = &MockHelloClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelloClientProxy) EXPECT() *MockHelloClientProxyMockRecorder {
	return m.recorder
}

// Hello mocks base method.
func (m *MockHelloClientProxy) Hello(ctx context.Context, req *HelloRequest, opts ...client.Option) (*HelloResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Hello", varargs...)
	ret0, _ := ret[0].(*HelloResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hello indicates an expected call of Hello.
func (mr *MockHelloClientProxyMockRecorder) Hello(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hello", reflect.TypeOf((*MockHelloClientProxy)(nil).Hello), varargs...)
}
